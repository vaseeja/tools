#!/bin/bash

# hm (handyman) is a productivity bash tool for quick shortcuts to common git and avsoftware tools to increase productivity"

usage ()
{
    echo "Options available:"
    echo "  hm branch <JIRA Key> : fork a new feature branch in git with the name AVSW-<JIRA Key>"
    echo "  hm delete <JIRA Key> : delete a feature branch in git with the name AVSW-<JIRA Key>"
    echo "  hm push : push current git commit branch to remote"
    echo "  hm merge_branch <SRC_BRANCH> <DST_BRANCH> : merge source branch to destination branch"
    echo "  hm merge_lyftbags <SRC_DIR> <OUT DIR> : merge multiple lyftbags into a single lyftbag"
	  echo "  hm update_bigquery: update bigquery schema when the proto file has changed"
    echo "  hm get_topic <FILES> <TOPIC>: extract a topic from a lyftbag"
    echo "  hm open <FILE>: find a file recursively in a given directory and open it for editing"
    echo "  hm revert_file <FILE> <REMOTE_BRANCH>: revert a file from a PR to its state in remote branch"
    echo "  hm build <TARGET>: build a target corresponding to a bazel target"
    echo "  hm copy_lb: copy latest lyftbag from local logs"
    echo "  hm download <START_TIME> <END_TIME> <CAR_ID> <TOPICS>: download lyftbag"
    echo "  hm release_notes"
    echo "  hm plot_interval <FILES> <TOPIC>: plot a topic from a lyftbag from pub to pub interval"
    echo "  hm plot_service_timing <FILES> <STAT>: plot a stat for the fusion vehicle service"
    echo "  hm plot_peak_can <LYFTBAG>"
    echo "  hm plot_can <LYFTBAG>"
    echo "  hm plot_topic <LYFTBAG> <TOPIC>"
    echo "  hm run_sim"
    echo "  hm run_avsr <TOPIC>"
    echo "  hm run_activity <ACTIVITY>"
    echo "  hm run_scmcontrol"
    echo "  hm print_multicast"
}

merge_lyftbags ()
{
  cd $TOP
  local INDIR=$1
  local OUTDIR=$2
  local FILES=$(find $INDIR -name '*.lyftbag')
  local STR=`echo $FILES | tr ' ' ','`
  echo $STR
  $TOP/bazel-bin/src/avs/tools/lyftbag_util/lyftbag_util -task merge --files $STR --out_dir=$OUTDIR
}

print_multicast_topics ()
{
  cd $TOP
  ./avctl run src/common/multicast_topics:multicast_ip_gen_bin --no-provision
}

plot_topic ()
{
    local LB_PATH=$1
    local TOPIC=$2
    cd $TOP
    ./avctl run --no-provision //scripts:plot -- -- -i $LB_PATH  -f $TOPIC
}

plot_peak_can ()
{
    python3 $TOP/experimental/vaseeja/peak_can_interval.py $1 --topics /peak_can_channel_2/receive_data,/peak_can_channel_2/send_data --can_ids 97,98,99,100,101
}

plot_can ()
{
    python3 $TOP/experimental/brianlee/plotting/can_interval.py $1 --topics /can_host_to_peripheral_2,/can_peripheral_to_host_2 --can_ids 96,98,100
}

download_data ()
{
  CUR_DIR=$(pwd)
  cd $TOP
  local START_TIME=$1
  local END_TIME=$2
  local CAR_ID=$3
  local TOPICS=$4
  cmd="./avctl run --no-provision src/backend/tools:download_data -- -- --min_time_ns="${START_TIME}000000" --max_time_ns="${END_TIME}000000" --car_id=$CAR_ID --output_dir_name=/tmp/lyftbags"
  if [ -n "$TOPICS" ]; then
    cmd="$cmd --topics $TOPICS"
  fi
  $cmd
  mv /tmp/lyftbags/* $CUR_DIR
}

copy_latest_lyftbag ()
{
  BASE_DIR="/tmp/avs/log/$HOSTNAME/$HOSTNAME"
  local LBAG=$(ls -t $BASE_DIR | head -1)
  cp "$BASE_DIR/$LBAG" $PWD
}

build_target ()
{
  cd $TOP
  ./avctl build --no-provision $BUILD_TARGET
}

run_activity ()
{
  cd $TOP
  ./avctl run --no-provision config/activities:$BUILD_TARGET
}

find_and_open_file ()
{
  local LFILE=$1
  local LOC=$(find . -name $LFILE)
  [[ -f $LOC ]] && vim $LOC || [[ -n $LOC ]] && echo -e "multiple files found: \n$LOC" || echo "file not found"
}

create_feature_branch ()
{
    local FBRANCH="AVSW-$1"
    echo "[hm] creating a new branch $FBRANCH"
    git checkout -b $FBRANCH
}

delete_feature_branch ()
{
    local FBRANCH="AVSW-$1"
    echo "[hm] deleting feature branch $FBRANCH"
    git branch -D $FBRANCH
}

push_branch_to_remote ()
{
    local CBRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo "[hm] running lint prior to push"
    cd $TOP
    $TOP/avctl lint -i --tracked_only
    git commit -am "lint"
    echo "[hm] current git branch: $CBRANCH"
    echo "[hm] pushing commit to remote"
    git push origin $CBRANCH
}

merge_branch ()
{
  local SBRANCH=$1
  local DBRANCH=$2
  echo "[hm] merge $SBRANCH to $DBRANCH"
  echo "[hm] checkout $DBRANCH"
  git checkout $DBRANCH
  echo "[hm] fetch and pull from origin"
  git fetch origin
  git pull
  local LBRANCH="$(echo ${DBRANCH} | tr '/' '_')_with_latest_${SBRANCH}_$(date +%Y%m%d)"
  echo "[hm] creating branch $LBRANCH"
  git checkout -b $LBRANCH
  echo "[hm] merging $SBRANCH to $LBRANCH"
  git merge origin/$SBRANCH
}

release_notes ()
{
  cd $TOP
  printf "\n"
  echo "# Commits added"
  printf "\n"
  echo "Please add the tests needed for each of these commits."
  printf "\n"
  echo "| Done | Contributor | Description | tag |"
  echo "|----|----|----|---|"
  git log --pretty=format:'|N|%ae|%s|%Cred%h%Creset|' --abbrev-commit --date=relative master..deliver/integration
  printf "\n"
  echo "# Testing Methodology"
  git log --pretty=format:'%Cred%h%Creset - %ae' --abbrev-commit --date=relative master..deliver/integration
}

revert_file () {
  local RBRANCH=$2
  local RFILE=$1
  echo "reverting file $RFILE to its state in $RBRANCH"
  git checkout origin/$RBRANCH -- $RFILE
#  push_branch_to_remote
}

update_bigquery_schema ()
{
  ./avctl analytics
}

extract_lyftbag_topic ()
{
  local LFILE=$1
  local TOPIC=$2
  $TOP/bazel-bin/src/avs/tools/lyftbag_util/lyftbag_util -task extract -extract_format json -files "$LFILE" -topics "$TOPIC" -out_dir "$PWD"
}

plot_topic_interval ()
{
  local LFILE=$1
  local TOPIC=$2
  python3 $TOP/experimental/brianlee/plotting/pub_interval.py  $LFILE --topics $TOPIC
}

plot_service_timing ()
{
  local LFILE=$1
  local STAT=$2
  local SERVICE=$3
  python3 $TOP/experimental/brianlee/plotting/service_timing.py --stat $STAT --service $SERVICE $LFILE
}

run_sim ()
{
    cd $TOP
    ./avctl run --no-provision //config/activities:nmc_autonomy_sim --instance=aut_sim_host
}

run_avsr ()
{
    cd $TOP
    local TOPIC=$1
    local AVSR_PATH="src/avs/tools/avsr"
    echo "avsr t e $TOPIC"
    [[ -f "$BIN_DIR/$AVSR_PATH/avsr" ]] && "$BIN_DIR/$AVSR_PATH/avsr" t e $TOPIC --stderrthreshold=0 || ./avctl run --no-provision "$AVSR_PATH:avsr" t e $TOPIC
}

run_scmcontrol ()
{
    cd $TOP
    ./avctl run //config/activities:autonomy_sim --instance=aut_sim_host
}

BUILD_AVCTL=0
COPY_LB=0
CREATE_BRANCH=0
DELETE_BRANCH=0
DOWNLOAD_DATA=0
DST_BRANCH=""
EXTRACT_TOPIC=0
JIRA_KEY=""
LB_FILE=""
MERGE_BRANCH=0
MERGE_LYFTBAGS=0
OPEN_FILE=0
PLOT_CAN=0
PLOT_PEAK_CAN=0
PLOT_SERVICE_TIMING=0
PLOT_TOPIC=0
PLOT_TOPIC_INTERVAL=0
PUSH_TO_REMOTE=0
RELEASE_NOTES=0
REVERT_FILE=0
RUN_SIM=0
RUN_AVSR=0
RUN_ACTIVITY=0
PRINT_MULTICAST=0
SERVICE=""
SRC_BRANCH=""
SRC_DIR=""
OUT_DIR=""
STAT=""
TARGET=""
TARGET_FILE=""
TOPIC=""
UPDATE_BIGQUERY=0

export TOP=/home/lyft/src/avsoftware
export BIN_DIR=$TOP/bazel-bin

for i in $@
do
case $i in
   branch)
   JIRA_KEY=$2
   CREATE_BRANCH=1
   shift
   shift
   ;;
   delete)
   JIRA_KEY=$2
   DELETE_BRANCH=1
   shift
   shift
   ;;
   push)
   PUSH_TO_REMOTE=1
   shift
   shift
   ;;
   merge_branch)
   MERGE_BRANCH=1
   SRC_BRANCH=$2
   DST_BRANCH=$3
   shift
   shift
   shift
   ;;
   merge_lb)
   MERGE_LYFTBAGS=1
	 SRC_DIR=$2
   OUT_DIR=$3
   shift
   shift
   shift
   ;;
   update_bigquery)
	 UPDATE_BIGQUERY=1
	 shift
	 shift
	 ;;
   get_topic)
   EXTRACT_TOPIC=1
   LB_FILE=$2
   TOPIC=$3
   shift
   shift
   shift
   ;;
   plot_interval)
   PLOT_TOPIC_INTERVAL=1
   LB_FILE=$2
   TOPIC=$3
   shift
   shift
   ;;
   plot_service_timing)
   PLOT_SERVICE_TIMING=1
   LB_FILE=$2
   STAT=$3
   SERVICE=$4
   shift
   shift
   shift
   ;;
   open)
   OPEN_FILE=1
   TARGET_FILE=$2
   shift
   shift
   ;;
   build)
   BUILD_AVCTL=1
   BUILD_TARGET=$2
   shift
   shift
   ;;
   run_activity)
   RUN_ACTIVITY=1
   BUILD_TARGET=$2
   shift
   shift
   ;;
   release_notes)
   RELEASE_NOTES=1
   shift
   ;;
   revert_file)
   REVERT_FILE=1
   TARGET_FILE=$2
   DST_BRANCH=$3
   shift
   shift
   shift
   ;;
   copy_lb)
   COPY_LB=1
   shift
   ;;
   download_data)
   DOWNLOAD_DATA=1
   START_TIME=$2
   END_TIME=$3
   CAR_ID=$4
   TOPICS=$5
   shift
   shift
   shift
   shift
   ;;
   plot_peak_can)
   PLOT_PEAK_CAN=1
   LB_FILE=$2
   shift
   ;;
   plot_can)
   PLOT_CAN=1
   LB_FILE=$2
   shift
   ;;
   plot_topic)
   PLOT_TOPIC=1
   LB_FILE=$2
   TOPIC=$3
   shift
   shift
   ;;
   run_sim)
   RUN_SIM=1
   shift
   ;;
   run_avsr)
   RUN_AVSR=1
   TOPIC=$2
   shift;
   shift;
   ;;
   print_multicast)
   PRINT_MULTICAST=1
   shift;
   ;;
 esac
done

if [[ $CREATE_BRANCH = 1 ]]; then
    create_feature_branch $JIRA_KEY
elif [[ $DELETE_BRANCH = 1 ]]; then
    delete_feature_branch $JIRA_KEY
elif [[ $PUSH_TO_REMOTE = 1 ]]; then
    push_branch_to_remote
elif [[ $MERGE_BRANCH = 1 ]]; then
    merge_branch $SRC_BRANCH $DST_BRANCH
elif [[ $MERGE_LYFTBAGS = 1 ]]; then
		merge_lyftbags $SRC_DIR $OUT_DIR
elif [[ $UPDATE_BIGQUERY = 1 ]]; then
    update_bigquery_schema
elif [[ $EXTRACT_TOPIC = 1 ]]; then
    extract_lyftbag_topic $LB_FILE $TOPIC
elif [[ $PLOT_TOPIC_INTERVAL = 1 ]]; then
    plot_topic_interval $LB_FILE $TOPIC
elif [[ $PLOT_SERVICE_TIMING = 1 ]]; then
    plot_service_timing $LB_FILE $STAT $SERVICE
elif [[ $OPEN_FILE = 1 ]]; then
    find_and_open_file $TARGET_FILE
elif [[ $BUILD_AVCTL = 1 ]]; then
    build_target $BUILD_TARGET
elif [[ $RELEASE_NOTES = 1 ]]; then
    release_notes
elif [[ $REVERT_FILE = 1 ]]; then
    revert_file $TARGET_FILE $DST_BRANCH
elif [[ $COPY_LB = 1 ]]; then
    copy_latest_lyftbag
elif [[ $DOWNLOAD_DATA = 1 ]]; then
    download_data $START_TIME $END_TIME $CAR_ID $TOPICS
elif [[ $PLOT_PEAK_CAN = 1 ]]; then
    plot_peak_can $LB_FILE
elif [[ $PLOT_CAN = 1 ]]; then
    plot_can $LB_FILE
elif [[ $PLOT_TOPIC = 1 ]]; then
    plot_topic $LB_FILE $TOPIC
elif [[ $RUN_SIM = 1 ]]; then
    run_sim
elif [[ $RUN_AVSR = 1 ]]; then
    run_avsr $TOPIC
elif [[ $RUN_ACTIVITY = 1 ]]; then
    run_activity $BUILD_TARGET
elif [[ $PRINT_MULTICAST = 1 ]]; then
    print_multicast_topics
else
    usage
fi
