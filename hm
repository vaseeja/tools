#!/bin/bash

# hm (handyman) is a productivity bash tool for quick shortcuts to common bash, git and other CLI tools to increase productivity

usage ()
{
    echo "Options available:"
    echo "  hm branch <JIRA Key> : fork a new feature branch in git with the name AVSW-<JIRA Key>"
    echo "  hm delete <JIRA Key> : delete a feature branch in git with the name AVSW-<JIRA Key>"
    echo "  hm push : push current git commit branch to remote"
    echo "  hm merge_branch <SRC_BRANCH> <DST_BRANCH> : merge source branch to destination branch"
	  echo "  hm update_bigquery: update bigquery schema when the proto file has changed"
    echo "  hm extract_topic <FILES> <TOPIC>: extract a topic from a lyftbag"
    echo "  hm plot_interval <FILES> <TOPIC>: plot a topic from a lyftbag from pub to pub interval"
    echo "  hm plot_service_timing <FILES> <STAT>: plot a stat for the fusion vehicle service"
    echo "  hm open <FILE>: find a file recursively in a given directory and open it for editing"
}

find_and_open_file ()
{
  local LFILE=$1
  local LOC=$(find . -name $LFILE)
  [[ -f $LOC ]] && vim $LOC || [[ -n $LOC ]] && echo -e "multiple files found: \n$LOC" || echo "file not found"
}

create_feature_branch ()
{
    local FBRANCH="AVSW-$1"
    echo "[hm] creating a new branch $FBRANCH"
    git checkout -b $FBRANCH
}

delete_feature_branch ()
{
    local FBRANCH="AVSW-$1"
    echo "[hm] deleting feature branch $FBRANCH"
    git branch -d $FBRANCH
}

push_branch_to_remote ()
{
    local CBRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo "[hm] running lint prior to push"
    cd $TOP
    $TOP/avctl lint -i
    git commit -am "lint"
    echo "[hm] current git branch: $CBRANCH"
    echo "[hm] pushing commit to remote"
    git push origin $CBRANCH
}

merge_branch ()
{
  local SBRANCH=$1
  local DBRANCH=$2
  echo "[hm] merge $SBRANCH to $DBRANCH"
  echo "[hm] checkout $DBRANCH"
  git checkout $DBRANCH
  echo "[hm] fetch and pull from origin"
  git fetch origin
  git pull
  local LBRANCH="$(echo ${DBRANCH} | tr '/' '_')_with_latest_${SBRANCH}_$(date +%Y%m%d)"
  echo "[hm] creating branch $LBRANCH"
  git checkout -b $LBRANCH
  echo "[hm] merging $SBRANCH to $LBRANCH"
  git merge origin/$SBRANCH
}


update_bigquery_schema ()
{
  ./avctl analytics
}

extract_lyftbag_topic ()
{
  local LFILE=$1
  local TOPIC=$2
  $TOP/run.sh lyftbag_util -task extract -extract_format json -files "$LFILE" -topics "$TOPIC" -out_dir "$PWD"
}

plot_topic_interval ()
{
  local LFILE=$1
  local TOPIC=$2
  python3 $TOP/experimental/brianlee/plotting/pub_interval.py --topics $TOPIC $LFILE
}

plot_service_timing ()
{
  local LFILE=$1
  local STAT=$2
  local SERVICE="fusion_vehicle_service"
  python3 $TOP/experimental/brianlee/plotting/service_timing.py --stat $STAT --service $SERVICE $LFILE
}

JIRA_KEY=""
LB_FILE=""
TOPIC=""
STAT=""
SRC_BRANCH=""
DST_BRANCH=""
TARGET_FILE=""
CREATE_BRANCH=0
DELETE_BRANCH=0
MERGE_BRANCH=0
PUSH_TO_REMOTE=0
UPDATE_BIGQUERY=0
EXTRACT_TOPIC=0
PLOT_TOPIC_INTERVAL=0
PLOT_SERVICE_TIMING=0
OPEN_FILE=0

export TOP=/home/lyft/src/avsoftware

for i in $@
do
case $i in
   branch)
   JIRA_KEY=$2
   CREATE_BRANCH=1
   shift
   shift
   ;;
   delete)
   JIRA_KEY=$2
   DELETE_BRANCH=1
   shift
   shift
   ;;
   push)
   PUSH_TO_REMOTE=1
   shift
   shift
   ;;
   merge_branch)
   MERGE_BRANCH=1
   SRC_BRANCH=$2
   DST_BRANCH=$3
   shift
   shift
   shift
   ;;
   update_bigquery)
	 UPDATE_BIGQUERY=1
	 shift
	 shift
	 ;;
   extract_topic)
   EXTRACT_TOPIC=1
   LB_FILE=$2
   TOPIC=$3
   shift
   shift
   shift
   ;;
   plot_interval)
   PLOT_TOPIC_INTERVAL=1
   LB_FILE=$2
   TOPIC=$3
   shift
   shift
   ;;
   plot_service_timing)
   PLOT_SERVICE_TIMING=1
   LB_FILE=$2
   STAT=$3
   shift
   shift
   ;;
   open)
   OPEN_FILE=1
   TARGET_FILE=$2
   shift
   shift
   ;;
 esac
done

if [[ $CREATE_BRANCH = 1 ]]; then
    create_feature_branch $JIRA_KEY
elif [[ $DELETE_BRANCH = 1 ]]; then
    delete_feature_branch $JIRA_KEY
elif [[ $PUSH_TO_REMOTE = 1 ]]; then
    push_branch_to_remote
elif [[ $MERGE_BRANCH = 1 ]]; then
    merge_branch $SRC_BRANCH $DST_BRANCH
elif [[ $UPDATE_BIGQUERY = 1 ]]; then
		update_bigquery_schema
elif [[ $EXTRACT_TOPIC = 1 ]]; then
    extract_lyftbag_topic $LB_FILE $TOPIC
elif [[ $PLOT_TOPIC_INTERVAL = 1 ]]; then
    plot_topic_interval $LB_FILE $TOPIC
elif [[ $PLOT_SERVICE_TIMING = 1 ]]; then
    plot_service_timing $LB_FILE $STAT
elif [[ $OPEN_FILE = 1 ]]; then
    find_and_open_file $TARGET_FILE
else
    usage
fi
