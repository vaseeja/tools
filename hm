#!/bin/bash

# hm (handyman) is a productivity bash tool for quick shortcuts to common bash, git and other CLI tools to increase productivity

usage ()
{
    echo "Options available:"
    echo "  hm branch <JIRA Key> : fork a new feature branch in git with the name AVSW-<JIRA Key>"
    echo "  hm delete <JIRA Key> : delete a feature branch in git with the name AVSW-<JIRA Key>"
    echo "  hm push : push current git commit branch to remote"
	  echo "  hm update_bigquery: update bigquery schema when the proto file has changed"
    echo "  hm extract_topic <FILES> <TOPIC>: extract a topic from a lyftbag"
    echo "  hm plot_interval <FILES> <TOPIC>: plot a topic from a lyftbag from pub to pub interval"
    echo "  hm plot_service_timing <FILES> <STAT>: plot a stat for the fusion vehicle service"
}

create_feature_branch ()
{
    local FBRANCH="AVSW-$1"
    echo "[hm] creating a new branch $FBRANCH"
    git checkout -b $FBRANCH
}

delete_feature_branch ()
{
    local FBRANCH="AVSW-$1"
    echo "[hm] deleting feature branch $FBRANCH"
    git branch -d $FBRANCH
}

push_branch_to_remote ()
{
    local CBRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo "[hm] current git branch: $CBRANCH"
    echo "[hm] pushing commit to remote"
    git push origin $CBRANCH
}

update_bigquery_schema ()
{
  # TODO (generalize this to parse all topics and run for all of them)
	bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/wheel_speed
  bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/autonomy_event
  bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/throttle
  bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/brake
  bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/speed
  bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/steering
  bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/is_stationary
  bazel run src/backend/bigquery:bigquery_schemagen_main -- --topics /vehicle_report/anti_lock_braking
}

extract_lyftbag_topic ()
{
  local LFILE=$1
  local TOPIC=$2
  cd $TOP
  ./run.sh lyftbag_util -task extract -extract_format json -files "$LFILE" -topics "$TOPIC"
}

plot_topic_interval ()
{
  local LFILE=$1
  local TOPIC=$2
  python3 $TOP/experimental/brianlee/plotting/pub_interval.py --topics $TOPIC $LFILE
}

plot_service_timing ()
{
  local LFILE=$1
  local STAT=$2
  local SERVICE="fusion_vehicle_service"
  python3 $TOP/experimental/brianlee/plotting/service_timing.py --stat $STAT --service $SERVICE $LFILE
}

JIRA_KEY=""
LB_FILE=""
TOPIC=""
STAT=""
CREATE_BRANCH=0
DELETE_BRANCH=0
PUSH_TO_REMOTE=0
UPDATE_BIGQUERY=0
EXTRACT_TOPIC=0
PLOT_TOPIC_INTERVAL=0
PLOT_SERVICE_TIMING=0

export TOP=/home/lyft/src/avsoftware

for i in $@
do
case $i in
   branch)
   JIRA_KEY=$2
   CREATE_BRANCH=1
   shift
   shift
   ;;
   delete)
   JIRA_KEY=$2
   DELETE_BRANCH=1
   shift
   shift
   ;;
   push)
   PUSH_TO_REMOTE=1
   shift
   shift
   ;;
   update_bigquery)
	 UPDATE_BIGQUERY=1
	 shift
	 shift
	 ;;
   extract_topic)
   EXTRACT_TOPIC=1
   LB_FILE=$2
   TOPIC=$3
   shift
   shift
   shift
   ;;
   plot_interval)
   PLOT_TOPIC_INTERVAL=1
   LB_FILE=$2
   TOPIC=$3
   shift
   shift
   ;;
   plot_service_timing)
   PLOT_SERVICE_TIMING=1
   LB_FILE=$2
   STAT=$3
   shift
   shift
   ;;
 esac
done

if [[ $CREATE_BRANCH = 1 ]]; then
    create_feature_branch $JIRA_KEY
elif [[ $DELETE_BRANCH = 1 ]]; then
    delete_feature_branch $JIRA_KEY
elif [[ $PUSH_TO_REMOTE = 1 ]]; then
    push_branch_to_remote
elif [[ $UPDATE_BIGQUERY = 1 ]]; then
		update_bigquery_schema
elif [[ $EXTRACT_TOPIC = 1 ]]; then
    extract_lyftbag_topic $LB_FILE $TOPIC
elif [[ $PLOT_TOPIC_INTERVAL = 1 ]]; then
    plot_topic_interval $LB_FILE $TOPIC
elif [[ $PLOT_SERVICE_TIMING = 1 ]]; then
    plot_service_timing $LB_FILE $STAT
else
    usage
fi
